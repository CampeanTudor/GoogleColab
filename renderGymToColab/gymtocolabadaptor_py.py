# -*- coding: utf-8 -*-
"""GymToColabAdaptor.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GSVucdKDEIrDdJwFXE-6AmUsjQDuVNs_

Install packages
"""

# Commented out IPython magic to ensure Python compatibility.
def install_packages_and_modules():
  #remove " > /dev/null 2>&1" to see what is going on under the hood
  !pip install gym pyvirtualdisplay > /dev/null 2>&1
  !apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1

  !apt-get update > /dev/null 2>&1
  !apt-get install cmake > /dev/null 2>&1
  !pip install --upgrade setuptools 2>&1
  !pip install ez_setup > /dev/null 2>&1
  !pip install gym[atari] > /dev/null 2>&1
  !pip install pyglet==1.3.2

  import gym
  from gym import logger as gymlogger
  from gym.wrappers import Monitor
  gymlogger.set_level(40) #error only
  import tensorflow as tf
  import numpy as np
  import random
  import matplotlib
  import matplotlib.pyplot as plt
#   %matplotlib inline
  import math
  import glob
  import io
  import base64
  from IPython.display import HTML
  from IPython import display as ipythondisplay
  from pyvirtualdisplay import Display

def start_display():
  display = Display(visible=0, size=(1400, 900))
  display.start()

"""Import libraries

Utility functions to enable video recording of gym environment and displaying it
To enable video, just do "env = wrap_env(env)
"""

def show_video():
  mp4list = glob.glob('video/*.mp4')
  if len(mp4list) > 0:
    mp4 = mp4list[0]
    video = io.open(mp4, 'r+b').read()
    encoded = base64.b64encode(video)
    ipythondisplay.display(HTML(data='''<video alt="test" autoplay 
                loop controls style="height: 400px;">
                <source src="data:video/mp4;base64,{0}" type="video/mp4" />
             </video>'''.format(encoded.decode('ascii'))))
  else: 
    print("Could not find video")
    

def wrap_env(env):
  env = Monitor(env, './video', force=True)
  return env

env = wrap_env(gym.make("MountainCar-v0"))



for episode in range(200):

  observation = env.reset()

  while True:
    
    env.render()
    
    #your agent goes here
    action = env.action_space.sample() 
         
    observation, reward, done, info = env.step(action) 
   
        
    if done: 
      break;
            
env.close()
show_video()

install_packages_and_modules()
start_display()